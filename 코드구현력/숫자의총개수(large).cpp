// 아이디어
//입력이 최대 1억이기 때문에 for문으로 일일이 자리수를 계산해서는 1초안에 연산이 되지 않는다.
// 1자리 = 9개
// 2자리 = 90개 (99-10+1)
// 3자리 = 900개
// 4자리 = 9000개
// ...
// 10자리(최대) = 9000000000개 (0이 9개)

//입력받은 수를 1자리인지 부터 검색해서 개수를 누적합한다. 
//예를 들어 256이면 두자리까지는 계산완료, 세자리인가? 에서 아니다로 나온다.
//그렇다면, 256 - 99 가 세자리수의 개수이므로, *3을 해주면 개수가 된다. 


//과정
// sum  d  c  res
// 0    9  1   9
// 9   90  2   189
//99  900  3   while문에서 false, 반환

#include <iostream>

using namespace std;
int main()
{
    int n, sum = 0, c = 1, d = 9, res = 0; 
    // sum = 누적되는 값(0,9,99,999..), c = 자리수(1,2,3..), d = 자리수의 개수(9,90,900...), res = 답

    cin >> n;

    while (sum + d < n) {
        // 누적된수에 자릿수의 갯수(1의자리면 9개)를 더한값이 들어온값보다 작다.
        res += (c * d); // 1자리수면 1*9를 더해준다. 
        sum += d;
        c++;
        d = d * 10;
    }
    
    res = res + (n - sum) * c; //res 갱신 후, c++을 더해서 다음자리로 만들어준 뒤 while에서 걸러졌으니 그 c를 써도 된다.
    cout << res << endl;

}